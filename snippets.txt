

- Authentication

paymill_context = paymill.PaymillContext('<YOUR PRIVATE API KEY>');




---------------------Payments----------------------


- Create new Credit Card Payment with TOKEN

payment_service = paymill_context.get_payment_service()

payment_with_token = payment_service.create(token='098f6bcd4621d373cade4e832627b4f6')


- Create new Credit Card Payment with TOKEN & CLIENT

payment_service = paymill_context.get_payment_service()

payment_with_token_and_client = payment_service.create(token='098f6bcd4621d373cade4e832627b4f6', client_id='client_33baaf3ee3251b083420')


- Create new Debit Payment with TOKEN

payment_service = paymill_context.get_payment_service()

payment_with_token = payment_service.create(token='098f6bcd4621d373cade4e832627b4f6')


- Create new Debit Payment with TOKEN & CLIENT

payment_service = paymill_context.get_payment_service()

payment_with_token_and_client = payment_service.create(token='098f6bcd4621d373cade4e832627b4f6', client_id='client_33baaf3ee3251b083420')


- Payment Details

payment_service = paymill_context.get_payment_service()

payment_details = payment_service.detail(payment_with_token)


- List Payments

payment_service = paymill_context.get_payment_service()

payments_list = payment_service.list()


- Remove Payment

payment_service = paymill_context.get_payment_service()

paymentService.remove(payment_with_token)




---------------------Preauthorizations----------------------


- Create new Preauthorization with TOKEN

preauthorization_service = paymill_context.get_preauthorization_service()

preauthorization_with_token =  preauthorization_service.create_with_token(token='098f6bcd4621d373cade4e832627b4f6', amount=4200, currency='EUR')


- Create new Preauthorization with PAYMENT

preauthorization_service = paymill_context.get_preauthorization_service()

preauthorization_with_payment =  preauthorization_service.create_with_payment_id(payment_id ='pay_3af44644dd6d25c820a9’, amount=4200, currency='EUR')


- Preauthorization Details

preauthorization_service = paymill_context.get_preauthorization_service()

preauthorization_details = preauthorization_service.detail(preauthorization_with_token)


- List Preauthorizations

preauthorization_service = paymill_context.get_preauthorization_service()

preauthorizations_list = preauthorization_service.list()


- Remove Preauthorizations

preauthorization_service = paymill_context.get_preauthorization_service()

preauthorization_service.remove(preauthorization_with_token)




---------------------Transactions----------------------


- Create new Transaction with PAYMENT

transaction_service = paymill_context.get_transaction_service()

transaction_with_payment = transaction_service.create_with_payment_id(payment_id=‘pay_3af44644dd6d25c820a9’, amount=4200, currency='EUR', description='Test Python')


- Create new Transaction with TOKEN

transaction_service = paymill_context.get_transaction_service()

transaction_with_token = transaction_service.create_with_token(token='098f6bcd4621d373cade4e832627b4f6', amount=4200, currency='EUR', description='Test Python')


- Create new Transaction with CLIENT & PAYMENT

transaction_service = paymill_context.get_transaction_service()

transaction_with_client_and_payment = transaction_service.create_with_payment_id(payment_id=‘pay_3af44644dd6d25c820a9’, amount=4200, currency='EUR', description='Test Python', client_id=‘client_33baaf3ee3251b083420’)


- Create new Transaction with PREAUTHORIZATION

transaction_service = paymill_context.get_transaction_service()

transaction_with_preauthorization = transaction_service.create_with_preauthorization_id(preauthorization_id=‘preauth_ec54f67e52e92051bd65’, amount=4200, currency='EUR', description='Test Python')


- Create new Transaction with APP FEE

transaction_service = paymill_context.get_transaction_service()

transaction_with_token = transaction_service.create_with_token(token='098f6bcd4621d373cade4e832627b4f6', amount=4200, currency='EUR', description='Test Python', fee_amount=4200, fee_payment_id=‘pay_3af44644dd6d25c820a9’, fee_currency='EUR')


- Transaction Details

transaction_service = paymill_context.get_transaction_service()

transaction_details = transaction_service.detail(transaction_with_token)


- Update Transaction

transaction_service = paymill_context.get_transaction_service()

transaction_with_token.amount = 3200
transaction_with_token.currency = 'USD'
transaction_with_token.description = 'Updated Test Python'
transaction_service.update(transaction_with_token)


- List Transactions

transaction_service = paymill_context.get_transaction_service()

transactions_list = transaction_service.list()


---------------------Refunds----------------------


- Refund Transaction

refund_service = paymill_context.get_refund_service()

refund_transaction = refund_service.refund_transaction(transaction_id=‘tran_ca3e7d41fb16d0157a99’, amount=4200)


- Refund Details

refund_service = paymill_context.get_refund_service()

refund_details =  refund_service.detail(refund_transaction)


- List Refunds

refund_service = paymill_context.get_refund_service()

refunds_list = refund_service.list()



---------------------Clients----------------------


- Create new Client

client_service = paymill_context.get_client_service()

client = client_service.create(email='lovely-client@example.com')


- Client Details

client_service = paymill_context.get_client_service()

client_details =  client_service.detail(client)


- Update Client

client_service = paymill_context.get_client_service()

client.email = 'lovely-client-updated-email@example.com'

client_service.update(client)


- Remove Client

client_service = paymill_context.get_client_service()

client_service.remove(client)


- List Clients

client_service = paymill_context.get_client_service()

clients_list = client_service.list()




---------------------Offers----------------------


- Create new Offer

offer_service = paymill_context.get_offer_service()

offer = offer_service.create(amount=100, currency='EUR', interval='1 MONTH', 'My offer')


- Offer Details

offer_service = paymill_context.get_offer_service()

offer_details =  offer_service.detail(offer)


- Update Offer

offer_service = paymill_context.get_offer_service()

offer.amount = 200

offer.currency = 'USD'

offer.interval = '2 WEEKS'

offer.name = 'My updated offer'

offer_service.update(offer)


- Remove Offer

offer_service = paymill_context.get_offer_service()

offer_service.remove(offer)


- List Offers

offer_service = paymill_context.get_offer_service()

offers_list = offer_service.list()




---------------------Subscriptions----------------------


- Create new Subscription WITHOUT OFFER

subscription_service = paymill_context.get_subscription_service()

subscription_without_offer = subscription_service.create_with_amount(payment_id=‘pay_3af44644dd6d25c820a9’, amount=4200, currency='EUR', interval='2 DAYS,MONDAY')


- Create new Subscription WITH AN OFFER

subscription_service = paymill_context.get_subscription_service()

subscription_with_an_offer = subscription_service.create_with_offer_id(payment_id=‘pay_3af44644dd6d25c820a9’, offer_id=‘offer_bb33ea77b942f570997b’)


- Create new Subscription WITH OFFER AND DIFFERENT VALUES

subscription_service = paymill_context.get_subscription_service()

subscription_with_offer_and_different_values = subscription_service.create_with_offer_id(payment_id=‘pay_3af44644dd6d25c820a9’, offer_id=‘offer_bb33ea77b942f570997b’, name='Subscription with values', period_of_validity='4 WEEKS', start_at=1409647372)


- Subscription Details

subscription_service = paymill_context.get_subscription_service()

subscription_details =  subscription_service.detail(subscription_without_offer)


- Update Subscription GENERAL

subscription_service = paymill_context.get_subscription_service()

subscription_without_offer.name = 'Updated Subscription'

subscription_service.update(subscription_without_offer)


- Update Subscription AMOUNT

subscription_service = paymill_context.get_subscription_service()

subscription_without_offer.amount = 5200

subscription_service.update_with_amount(subscription_without_offer, amount_change_type=1)


- Update Subscription OFFER

subscription_service = paymill_context.get_subscription_service()

subscription_with_an_offer.offer_id=‘offer_40237e20a7d5a231d99b’

subscription_service.update_with_offer_id(subscription_with_an_offer, offer_change_type=2)


- Update Subscription PAUSE

subscription_service = paymill_context.get_subscription_service()

subscription_service.pause(subscription_without_offer)


- Update Subscription UNPAUSE

subscription_service = paymill_context.get_subscription_service()

subscription_service.unpause(subscription_without_offer)


- Delete Subscription

subscription_service = paymill_context.get_subscription_service()

subscription_service.remove(subscription_without_offer)


- Cancel Subscription

subscription_service = paymill_context.get_subscription_service()

subscription_service.cancel(subscription_without_offer)


- List Subscriptions

subscription_service = paymill_context.get_subscription_service()

subscription_list = subscription_service.list()




-------------------------Webhooks----------------------------------------------


- Create new URL Webhook

webhook_service = paymill_context.get_webhook_service()

url_webhook = webhook_service.create_url(url='<your-webhook-url>', event_types=['subscription.succeeded'], active=True)


- Create new E-Mail Webhook

webhook_service = paymill_context.get_webhook_service()

email_webhook = webhook_service.create_email(email='lovely-webhook@example.com', event_types=['subscription.succeeded'], active=True)


- Webhook Details

webhook_service = paymill_context.get_webhook_service()

webhook_details =  webhook_service.detail(email_webhook)


- Update Webhook

webhook_service = paymill_context.get_webhook_service()

email_webhook.email = 'updated-lovely-webhook@example.com'

webhook_service.update(email_webhook)


- Remove Webhook

webhook_service = paymill_context.get_webhook_service()

webhook_service.remove(email_webhook)


- List Webhooks

webhook_service = paymill_context.get_webhook_service()

webhooks_list = webhook_service.list()

